import { Action, Ctx, Start, Update } from 'nestjs-telegraf';
import { CALLBACK_ACTIONS, PRESET } from '../constants';
import { CUSTOM_NAME_SCENE } from '../constants/scenes';
import type { MyContext, MySceneContext } from '../types';
import { renderPresetScreen } from '../utils';

@Update()
export class StartUpdate {
  @Start()
  async onStart(@Ctx() ctx: MyContext) {
    await ctx.reply(
      '–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Å–∫–ª–∞–¥—ã–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–∫–∏ –ø–æ –ø–æ–ª–æ—á–∫–∞–º.\n–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Äî —Ç–∞–∫ –±—É–¥–µ—Ç –ø—Ä–æ—â–µ –Ω–∞–≤–æ–¥–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫.',
      {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üß© –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç',
                callback_data: CALLBACK_ACTIONS.MODE,
              },
            ],
            [{ text: '‚úçÔ∏è –°–≤–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', callback_data: 'mode:custom' }],
          ],
        },
      },
    );
  }

  // –†–µ–∂–∏–º –ø—Ä–µ—Å–µ—Ç–æ–≤
  @Action(CALLBACK_ACTIONS.MODE)
  async openPreset(@Ctx() ctx: MyContext) {
    ctx.session.mode = 'preset';
    if (Object.keys(ctx.session.preset).length === 0) {
      PRESET.forEach((p) => (ctx.session.preset[p] = true));
    }
    await ctx.answerCbQuery();
    await renderPresetScreen(ctx);
  }

  // –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–≤–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  @Action('mode:custom')
  async openCustom(@Ctx() ctx: MySceneContext) {
    ctx.session.mode = 'custom';
    ctx.session.preset = {};
    await ctx.answerCbQuery();

    await ctx.scene.enter(CUSTOM_NAME_SCENE);
  }
}
